/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.dockerd2;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author laursuom
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
        PrintStream stream = new PrintStream(new CustomOutputStream(jTextArea1));
        System.setOut(stream);
        ContainerListUpdater containerListUpdater = new ContainerListUpdater();
        new Thread(containerListUpdater).start();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        setTitle("Cloud Manager");
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        IPList = new MutableList();
        hostLabel = new JLabel("Connected Hosts");
        containerLabel = new JLabel("Running Containers");

        containerTable = new MutableList();
        containerTable.setLayout(new GridLayout(0,2));
        containerTable.setLayoutOrientation(JList.HORIZONTAL_WRAP);
        containerTable.setCellRenderer(new CellRenderer());
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane2.setViewportView(IPList);
        jScrollPane1.setViewportView(containerTable);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hostLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                                .addComponent(containerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                .addComponent(jScrollPane3)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hostLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(containerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
        );
        pack();
    }// </editor-fold>                        

    // Variables declaratio                    
    private MutableList IPList;
    private MutableList containerTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private JLabel hostLabel;
    private JLabel containerLabel;
    private ArrayList<JPanel> listData;
    // End of variables declaration                   

    class MutableList extends JList {

        MutableList() {
            super(new DefaultListModel());
        }

        DefaultListModel getContents() {
            return (DefaultListModel) getModel();
        }
    }

    class MutableTable extends JTable {

        MutableTable() {
            super(new DefaultTableModel());
        }

        DefaultTableModel getContents() {
            return (DefaultTableModel) getModel();
        }
    }

    public void addIP(String ip) {
        IPList.getContents().addElement(ip);
    }

    public void removeIP(String ip) {
        IPList.getContents().removeElement(ip);
    }

    public void addContainer(String container) {
        containerTable.getContents().addElement(container);
    }

    public void removeContainer(String container) {
        containerTable.getContents().removeElement(container);
    }

    protected class ContainerListUpdater implements Runnable {

        @Override
        public void run() {

            try {
                while (true) {

                    Set<String> names = getNames(DockerD.containerManager.getIds());
                    for (Object id : containerTable.getContents().toArray()) {
                        
                        if (!names.contains(id.toString())) {
                            removeContainer(id.toString());
                        }
                    }
                    
                    for (String id : DockerD.containerManager.getIds()) {
                        Process p = Runtime.getRuntime().exec(getCommand(id.substring(0, 10)));
                        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
                        if (!reader.readLine().equals("0") && !containerTable.getContents().contains(getNameFromId(id))) {
                            addContainer(getNameFromId(id));
                        }

                    }
                    sleep(5000);
                }
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        private String[] getCommand(String id) {
            String[] cmd = {
                "/bin/sh",
                "-c",
                "docker ps | grep " + id + " | wc -l"
            };
            return cmd;
        }

        private Set<String> getNames(Set<String> ids) {
            Set<String> names = new HashSet<String>();
            for (String id : ids) {
                names.add(getNameFromId(id));
            }
            return names;
        }

        private String getNameFromId(String id) {
            return ContainerCommander.getContainerFieldValue(".Config.Image", id, null);
        }
    }

    protected class CellRenderer implements ListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList jList, Object value, int cellIndex, boolean isSelected, boolean cellHasFocus) {

            if (value instanceof String) {
                JPanel panel = new JPanel();
                JLabel label = new JLabel(value.toString());
                label.setBounds(new Rectangle(1000,1000));
                label.setForeground(Color.red);
                label.setFont(new Font("name", Font.PLAIN, 50));
                label.setVisible(true);
                panel.add(label);
                panel.setForeground(Color.red);
                panel.setBounds(new Rectangle(1000,1000));
                panel.setBackground(Color.black);
                panel.setVisible(true);
                
                return panel;
            } else {
                return new JLabel("Lolwut");
            }

        }

    }

    protected class CustomOutputStream extends OutputStream {

        private JTextArea textArea;

        public CustomOutputStream(JTextArea textArea) {
            this.textArea = textArea;
        }

        @Override
        public void write(int b) throws IOException {
            // redirects data to the text area
            textArea.append(String.valueOf((char) b));
            // scrolls the text area to the end of data
            textArea.setCaretPosition(textArea.getDocument().getLength());
        }
    }
}
